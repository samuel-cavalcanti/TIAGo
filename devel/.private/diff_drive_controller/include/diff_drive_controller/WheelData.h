// Generated by gencpp from file diff_drive_controller/WheelData.msg
// DO NOT EDIT!


#ifndef DIFF_DRIVE_CONTROLLER_MESSAGE_WHEELDATA_H
#define DIFF_DRIVE_CONTROLLER_MESSAGE_WHEELDATA_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace diff_drive_controller
{
template <class ContainerAllocator>
struct WheelData_
{
  typedef WheelData_<ContainerAllocator> Type;

  WheelData_()
    : left_wheel_joint_names()
    , right_wheel_joint_names()
    , left_wheel_joint_actual_position()
    , right_wheel_joint_actual_position()
    , left_wheel_joint_actual_velocity()
    , right_wheel_joint_actual_velocity()
    , left_wheel_joint_reference_velocity()
    , right_wheel_joint_reference_velocity()  {
    }
  WheelData_(const ContainerAllocator& _alloc)
    : left_wheel_joint_names(_alloc)
    , right_wheel_joint_names(_alloc)
    , left_wheel_joint_actual_position(_alloc)
    , right_wheel_joint_actual_position(_alloc)
    , left_wheel_joint_actual_velocity(_alloc)
    , right_wheel_joint_actual_velocity(_alloc)
    , left_wheel_joint_reference_velocity(_alloc)
    , right_wheel_joint_reference_velocity(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _left_wheel_joint_names_type;
  _left_wheel_joint_names_type left_wheel_joint_names;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _right_wheel_joint_names_type;
  _right_wheel_joint_names_type right_wheel_joint_names;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _left_wheel_joint_actual_position_type;
  _left_wheel_joint_actual_position_type left_wheel_joint_actual_position;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _right_wheel_joint_actual_position_type;
  _right_wheel_joint_actual_position_type right_wheel_joint_actual_position;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _left_wheel_joint_actual_velocity_type;
  _left_wheel_joint_actual_velocity_type left_wheel_joint_actual_velocity;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _right_wheel_joint_actual_velocity_type;
  _right_wheel_joint_actual_velocity_type right_wheel_joint_actual_velocity;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _left_wheel_joint_reference_velocity_type;
  _left_wheel_joint_reference_velocity_type left_wheel_joint_reference_velocity;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _right_wheel_joint_reference_velocity_type;
  _right_wheel_joint_reference_velocity_type right_wheel_joint_reference_velocity;




  typedef boost::shared_ptr< ::diff_drive_controller::WheelData_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::diff_drive_controller::WheelData_<ContainerAllocator> const> ConstPtr;

}; // struct WheelData_

typedef ::diff_drive_controller::WheelData_<std::allocator<void> > WheelData;

typedef boost::shared_ptr< ::diff_drive_controller::WheelData > WheelDataPtr;
typedef boost::shared_ptr< ::diff_drive_controller::WheelData const> WheelDataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::diff_drive_controller::WheelData_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::diff_drive_controller::WheelData_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace diff_drive_controller

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'diff_drive_controller': ['/home/samuel/tiago_public_ws/src/ros_controllers/diff_drive_controller/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::diff_drive_controller::WheelData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::diff_drive_controller::WheelData_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::diff_drive_controller::WheelData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::diff_drive_controller::WheelData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::diff_drive_controller::WheelData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::diff_drive_controller::WheelData_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::diff_drive_controller::WheelData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f3cef9a3c8f62c082f7316e75ecd5bc5";
  }

  static const char* value(const ::diff_drive_controller::WheelData_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf3cef9a3c8f62c08ULL;
  static const uint64_t static_value2 = 0x2f7316e75ecd5bc5ULL;
};

template<class ContainerAllocator>
struct DataType< ::diff_drive_controller::WheelData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "diff_drive_controller/WheelData";
  }

  static const char* value(const ::diff_drive_controller::WheelData_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::diff_drive_controller::WheelData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string[] left_wheel_joint_names\n\
string[] right_wheel_joint_names\n\
\n\
float64[] left_wheel_joint_actual_position\n\
float64[] right_wheel_joint_actual_position\n\
\n\
float64[] left_wheel_joint_actual_velocity\n\
float64[] right_wheel_joint_actual_velocity\n\
\n\
float64[] left_wheel_joint_reference_velocity\n\
float64[] right_wheel_joint_reference_velocity\n\
";
  }

  static const char* value(const ::diff_drive_controller::WheelData_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::diff_drive_controller::WheelData_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.left_wheel_joint_names);
      stream.next(m.right_wheel_joint_names);
      stream.next(m.left_wheel_joint_actual_position);
      stream.next(m.right_wheel_joint_actual_position);
      stream.next(m.left_wheel_joint_actual_velocity);
      stream.next(m.right_wheel_joint_actual_velocity);
      stream.next(m.left_wheel_joint_reference_velocity);
      stream.next(m.right_wheel_joint_reference_velocity);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct WheelData_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::diff_drive_controller::WheelData_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::diff_drive_controller::WheelData_<ContainerAllocator>& v)
  {
    s << indent << "left_wheel_joint_names[]" << std::endl;
    for (size_t i = 0; i < v.left_wheel_joint_names.size(); ++i)
    {
      s << indent << "  left_wheel_joint_names[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.left_wheel_joint_names[i]);
    }
    s << indent << "right_wheel_joint_names[]" << std::endl;
    for (size_t i = 0; i < v.right_wheel_joint_names.size(); ++i)
    {
      s << indent << "  right_wheel_joint_names[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.right_wheel_joint_names[i]);
    }
    s << indent << "left_wheel_joint_actual_position[]" << std::endl;
    for (size_t i = 0; i < v.left_wheel_joint_actual_position.size(); ++i)
    {
      s << indent << "  left_wheel_joint_actual_position[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.left_wheel_joint_actual_position[i]);
    }
    s << indent << "right_wheel_joint_actual_position[]" << std::endl;
    for (size_t i = 0; i < v.right_wheel_joint_actual_position.size(); ++i)
    {
      s << indent << "  right_wheel_joint_actual_position[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.right_wheel_joint_actual_position[i]);
    }
    s << indent << "left_wheel_joint_actual_velocity[]" << std::endl;
    for (size_t i = 0; i < v.left_wheel_joint_actual_velocity.size(); ++i)
    {
      s << indent << "  left_wheel_joint_actual_velocity[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.left_wheel_joint_actual_velocity[i]);
    }
    s << indent << "right_wheel_joint_actual_velocity[]" << std::endl;
    for (size_t i = 0; i < v.right_wheel_joint_actual_velocity.size(); ++i)
    {
      s << indent << "  right_wheel_joint_actual_velocity[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.right_wheel_joint_actual_velocity[i]);
    }
    s << indent << "left_wheel_joint_reference_velocity[]" << std::endl;
    for (size_t i = 0; i < v.left_wheel_joint_reference_velocity.size(); ++i)
    {
      s << indent << "  left_wheel_joint_reference_velocity[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.left_wheel_joint_reference_velocity[i]);
    }
    s << indent << "right_wheel_joint_reference_velocity[]" << std::endl;
    for (size_t i = 0; i < v.right_wheel_joint_reference_velocity.size(); ++i)
    {
      s << indent << "  right_wheel_joint_reference_velocity[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.right_wheel_joint_reference_velocity[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // DIFF_DRIVE_CONTROLLER_MESSAGE_WHEELDATA_H
